library(dplyr) # for data wrangling
library(ggplot2) # for creating plots
library(stargazer) # for formatting model output
install.packages(stargazer)
install.packages('stargazer')
library(stargazer) # for formatting model output
library(kableExtra) # for formatting data frames
install.packages('kableExtra')
install.packages('MatchIt')
library(kableExtra) # for formatting data frames
library(MatchIt) # for matching
library(ggplot2) # for creating plots
library(dplyr) # for data wrangling
ecls <- read.csv("data/ecls.csv")
View(ecls)
ecls <- ecls %>%
select(-childid, -race, -w3daded,
-w3momed, -w3inccat)
ecls %>%
group_by(catholic) %>% #whether they went to catholic school or not
summarise(n_students = n(), #summary statistics, we're looking for nstudents [n() gives you a count], mean math score [which is equal to the mean of factor name "c5r2mtsc_std"], and then we run it
mean_math = mean(c5r2mtsc_std),
std_error = sd(c5r2mtsc_std) / sqrt(n_students)) %>%
round(3) %>% # round the results
kable() %>% # create kable table
kable_styling() # view kable table
ecls %>%
group_by(catholic) %>% #whether they went to catholic school or not
summarise(n_students = n(), #summary statistics, we're looking for nstudents [n() gives you a count], mean math score [which is equal to the mean of factor name "c5r2mtsc_std"], and then we run it
mean_math = mean(c5r2mtsc_std),
std_error = sd(c5r2mtsc_std) / sqrt(n_students)) %>% #she says this is "just for fun"; that's the formula for std.error
#this could count for our assignment. But we could make it a lot more aesthetic
round(2) %>% # round the results
kable() %>% # create kable table
kable_styling() # view kable table
t.test(ecls$c5r2mtsc_std ~ ecls$catholic)
install.packages(c("kableExtra", "MatchIt", "stargazer"))
library(dplyr) # for data wrangling
library(ggplot2) # for creating plots
library(stargazer) # for formatting model output
library(kableExtra) # for formatting data frames
library(MatchIt) # for matching
library(MatchIt) # for matching
ecls %>%
group_by(catholic) %>% #cleans up the table and allows us to observe based on their religion
summarise_all(funs(mean(., na.rm = T))) %>% # summarize the mean of every variable; it's a fancy new summarize function that does it all at once #funs tells us which function we want to use to summarise, na.rm=true as usual to remove N/As in our mean.
t() %>% # transpose data; i.e. to flip it so it's cleaner (just for your viewing pleasure) - tehcnically, your balance table is done here. But you can make it better from below onwards. Transpose turns it into a matrix from a dataframe.
as.data.frame() %>% # after transposing, convert from matrix to df so that we can work with it
add_rownames("variable") %>% # rownames to explicit column #this isn't necessary, but for looks
rename(no_catholic = V1, catholic = V2) %>% # rename columns that are created by as.data.frame
mutate(difference = catholic - no_catholic,
differencePerc = difference / (catholic + no_catholic)) %>% # create new columns for difference between groups
#we're basically creating new columns too
mutate_if(is.numeric, round, 3) %>% # round numeric columns; because without is.numeric, it would've rounded off text too, which obviously doesn't work.
kable() %>% # create kable table
kable_styling() # view kable table
ecls %>%
group_by(catholic) %>% #cleans up the table and allows us to observe based on their religion
summarise_all(funs(mean(., na.rm = T))) %>% # summarize the mean of every variable; it's a fancy new summarize function that does it all at once #funs tells us which function we want to use to summarise, na.rm=true as usual to remove N/As in our mean.
t() %>% # transpose data; i.e. to flip it so it's cleaner (just for your viewing pleasure) - tehcnically, your balance table is done here. But you can make it better from below onwards. Transpose turns it into a matrix from a dataframe.
as.data.frame() %>% # after transposing, convert from matrix to df so that we can work with it
add_rownames("variable") %>% # rownames to explicit column #this isn't necessary, but for looks
rename(no_catholic = V1, catholic = V2) %>% # rename columns that are created by as.data.frame
mutate(difference = catholic - no_catholic,
differencePerc = difference / (catholic + no_catholic)) %>% # create new columns for difference between groups
#we're basically creating new columns too
mutate_if(is.numeric, round, 3) %>% # round numeric columns; because without is.numeric, it would've rounded off text too, which obviously doesn't work.
kable() %>% # create kable table
kable_styling() # view kable table
The basic syntax is as follows: <br>
*matched <- matchit(treat ~ x1 + x2, data = mydata)*
The basic syntax is as follows: <br>
*matched <- matchit(treat ~ x1 + x2, data = mydata)*
matched = matchit(treat ~ x1 + x2, data = mydata)
match_data <- ecls %>%
select(catholic, c5r2mtsc_std, race_white, p5hmage,
w3income, p5numpla, w3momed_hsb) %>%  #we are only selecting the variables we need (see above)
na.omit()
View(match_data)
# perform exact match
exact_match <- matchit(catholic ~ race_white + p5hmage + w3income +
p5numpla + w3momed_hsb,
method = "exact",
data = match_data)
# grab the matched data
data_exact_match <- match.data(exact_match)
# estimate t-test again
t.test(data_exact_match$c5r2mtsc_std ~ data_exact_match$catholic)
ecls <- ecls %>%
mutate(w3income_1k = w3income / 1000)
# estimate logit model
m_ps <- glm(catholic ~ race_white + w3income_1k +
p5hmage + p5numpla + w3momed_hsb,
family = binomial(),
data = ecls)
# use the stargazer package to view the output
# NOTE: you MUST include results = "asis" in the chunk header for this to be visible once knitted
stargazer(m_ps, type = "html")
# create a new column with income by the thousands for more interpretable output
ecls <- ecls %>%
mutate(w3income_1k = w3income / 1000)
# estimate logit model
m_ps <- glm(catholic ~ race_white + w3income_1k +
p5hmage + p5numpla + w3momed_hsb,
family = binomial(), #this is a generalized linear model (glm)
data = ecls)
# use the stargazer package to view the output
# NOTE: you MUST include results = "asis" in the chunk header for this to be visible once knitted
stargazer(m_ps, type = "html")
# extract predicted probabilities
# type = "response" option tells R to output probabilities of the form P(Y = 1|X)
prs_df <- data.frame(pr_score = predict(m_ps, type = "response"),
catholic = m_ps$model$catholic) # the actual values
prs_df <- data.frame(pr_score = predict(m_ps, type = "response"),
catholic = m_ps$model$catholic) # the actual values
prs_df %>%
ggplot(aes(x = pr_score, fill = factor(catholic))) + #fill is the color, catholic is just 1&0, so we want to convert it into a factor
geom_density(alpha = 0.5) + #allows us to make it see through (like opacity)
labs(x = "Propensity Score Distribution: Treatment and Control Groups",
fill = "Catholic School Attendance")
one_match <- matchit(catholic ~ race_white + w3income + p5hmage +
p5numpla + w3momed_hsb,
method = "nearest",
ratio = 1,
replace = TRUE,
data = match_data)
summary(one_match)
summary(one_match)
plot(one_match, type = "hist")
# grab data set
data_prop_match <- match.data(one_match)
data_prop_match %>%
group_by(catholic) %>%
summarise_all(funs(mean)) %>%
t() %>%
as.data.frame() %>%
add_rownames("variable") %>%
rename(no_catholic = V1, catholic = V2) %>%
mutate(difference = catholic - no_catholic,
differencePerc = difference / (catholic + no_catholic)) %>%
mutate_if(is.numeric, round, 3) %>%
kable() %>%
kable_styling()
